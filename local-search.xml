<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一些神奇妙妙操作</title>
    <link href="/2023/08/13/%E4%B8%80%E4%BA%9B%E7%A5%9E%E5%A5%87%E5%A6%99%E5%A6%99%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/08/13/%E4%B8%80%E4%BA%9B%E7%A5%9E%E5%A5%87%E5%A6%99%E5%A6%99%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Windows Powershell 的 Profile 地址：<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.3">manual</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">All Users, All Hosts<br>Windows - <span class="hljs-variable">$PSHOME</span>\Profile.ps1<br>Linux - <span class="hljs-regexp">/opt/mi</span>crosoft<span class="hljs-regexp">/powershell/</span><span class="hljs-number">7</span>/profile.ps1<br>macOS - <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/microsoft/</span>powershell<span class="hljs-regexp">/7/</span>profile.ps1<br>All Users, Current Host<br>Windows - <span class="hljs-variable">$PSHOME</span>\Microsoft.PowerShell_profile.ps1<br>Linux - <span class="hljs-regexp">/opt/mi</span>crosoft<span class="hljs-regexp">/powershell/</span><span class="hljs-number">7</span>/Microsoft.PowerShell_profile.ps1<br>macOS - <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/microsoft/</span>powershell<span class="hljs-regexp">/7/</span>Microsoft.PowerShell_profile.ps1<br>Current User, All Hosts<br>Windows - <span class="hljs-variable">$HOME</span>\Documents\PowerShell\Profile.ps1<br>Linux - ~<span class="hljs-regexp">/.config/</span>powershell/profile.ps1<br>macOS - ~<span class="hljs-regexp">/.config/</span>powershell/profile.ps1<br>Current user, Current Host<br>Windows - <span class="hljs-variable">$HOME</span>\Documents\PowerShell\Microsoft.PowerShell_profile.ps1<br>Linux - ~<span class="hljs-regexp">/.config/</span>powershell/Microsoft.PowerShell_profile.ps1<br>macOS - ~<span class="hljs-regexp">/.config/</span>powershell/Microsoft.PowerShell_profile.ps1<br></code></pre></td></tr></table></figure><p>My Case 用的是第一个（好像不太好），展开是 C:\Windows\System32\WindowsPowerShell\v1.0</p></li><li><p>Windows 下 iTunes 自动备份的地址：</p><ul><li>如果是 MicroSoft Store 下的（My Case）在 <code>%USERPROFILE%/Apple/MobileSync</code></li><li>如果是直接装的在 <code>%appdata%/Apple/MobileSync</code></li><li>以上 Apple 也可能被替换为 Apple Computer</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>踩坑记录</title>
    <link href="/2023/08/02/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/08/02/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>这里会收录一些我在学习新框架、新语言、新工具等时所曾经参考过的高质量教程&#x2F;文档，以及一些踩坑时帮助我的帖子（主要是 StackOverflow），以供我自己以后查阅，也可供大家参考。</p><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><ul><li><p><a href="https://stackoverflow.com/questions/52764405/selenium-cant-find-elements-even-if-they-exist">Selenium can’t find elements even if they exist</a> 可能是要切换 iframe。</p></li><li><p>selenium 检查元素是否存在可以使用 find_elements，判断返回列表的 len 是否大于 0。如果直接调用 find_element 会返回 Exception。</p></li><li><p>selenium 默认的等待时间是通过 driver.implicitly_wait 设置的，这个函数并不是在当前位置等一会，而是一个全局的设置</p></li></ul><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><ul><li><p><a href="https://data36.com/beautiful-soup-tutorial-web-scraping/">Beautiful Soup Tutorial 1. – An Introduction to Web Scraping with Python</a></p></li><li><p><a href="https://stackoverflow.com/questions/18725760/beautifulsoup-findall-given-multiple-classes">BeautifulSoup findAll() given multiple classes?</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 CUHK CSE Early Admission 面经</title>
    <link href="/2023/07/12/2023-CUHK-CSE-Early-Admission-%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/07/12/2023-CUHK-CSE-Early-Admission-%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>纯纯摸鱼，早茶不错。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
      <tag>CUHK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 NJU AI 夏令营面经</title>
    <link href="/2023/07/12/2023-NJU-AI-%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%9D%A2%E7%BB%8F/"/>
    <url>/2023/07/12/2023-NJU-AI-%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于<del>鼠鼠比较低能</del>，本科期间没有科研产出，只有两段本校的科研经历，因此保外校比较吃亏，夏令营的重心就放在本校的夏令营上。</p><h2 id="NJUAI-夏令营"><a href="#NJUAI-夏令营" class="headerlink" title="NJUAI 夏令营"></a>NJUAI 夏令营</h2><p>2023 年夏令营在 7 月 11~13 日，11 日面试，12 日笔试。</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>面试问四个部分，一是简历上的项目经历，二是专业知识，三是英文口语问题，四是脑筋急转弯。</p><p>简历问的很深，没怎么问项目的细节，反而是基于研究领域问一些比较深的问题。例如我本科搞的演化算法，于是就被问到了为什么多目标优化适合用演化算法求解等。当时没有准备，只能乱扯一通，感觉答得不太好，最后时间到了老师直接让我不要说了。</p><p>机器学习知识部分集中在西瓜书上，我被问了 SVM，MDP，Adaboost，复习充分的话问题不大（面 lamda 这不全文背诵西瓜书 doge）。专业知识主要取决于你的背景和面你的老师。听说有计科的同学来面试被问了一通计网，还有偏理论的老师会问较多数学问题（老师长啥样和研究方向可以上 lamda 官网查看），尤其是凸优化相关。</p><p>之后交流得知其他组的同学有被问到有关决策树、方差的性质等问题。还有一个特点是老师喜欢将 ML 算法和原教旨算法结合起来问，比如如何从 DP 的视角看待一些 ML 算法。</p><p>英文口语问题问的是你从你的研究经历中学到了什么，这个问题因人而异，感觉临场发挥问题不大。</p><p>脑筋急转弯是一个关于如何生成随机数的题，有时间限制，如果前面答得快后面时间就会充裕一点。当时比较紧张，想了半天，直到最后一刻才极限回答（考后感觉十秒就能想出来了 x）。这个题也因人而异，感觉没法准备，要想准备的话只能建议考前烧高香（x）。</p><p>面完出来发现大家都没准备好被问简历（主要是往年面经好像都说不问简历），有些同学专业知识问得偏没答好，脑筋急转弯也有很多同学没有答出来。感觉大家表现都差不多，运气成分比较多，如果正好问到了擅长的课那一般没什么问题。</p><p>面试有录像，也会整体计时，一个人只有 12 min 左右，因此要注意言简意赅，答得越流畅能答的题就越多。</p><h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>今年笔试和机试是一起进行的，形式为在机房里发一张纸质笔试试卷和机试试题的 pdf，笔试在纸上写，机试电脑编程 OJ 提交。题目一起下发，一共 2.5h，时间自由分配。</p><p>笔试相较去年形式有很大变化，有 10 个填空，14 个大题，内容涉及机器学习、数据结构、算法、概率论、知识表示与处理（Knowledge Representation &amp; Processing，简称 KRP，是 NJUAI 特色课程，讲的是逻辑学派实现人工智能的方法）。</p><p>填空部分基本全是数据结构的考研题，我虽然学过这课但是印象有点淡，因此做的有点慢。</p><p>笔试部分先是几个数据结构的题（不难），然后是几个概率论的问答题（不需要计算，就是谈谈集中不等式的优劣势之类的），然后是几个有关 ML 算法的题（AIMA &amp; 西瓜书里的算法都有涉及），最后是 5 个英文的 KRP 题（不是很难，不需要很多的背景知识，即使没学过这个课耐心看一看题应该也能写出来一部分）。</p><p>整个试卷基本只有数据结构部分需要一些计算，其他部分题目都比较主观，要写字的题有点多。再加之题目是过量的，因此写字快的同学应该有优势（x）。</p><p>总体来讲，复习的宽度比深度更重要，数据结构和概率论的各种知识点建议全部要覆盖到，不需要去刷很难的题。</p><h3 id="机试"><a href="#机试" class="headerlink" title="机试"></a>机试</h3>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
      <tag>NJUAI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人类早期驯服野生 KDE 珍贵记录</title>
    <link href="/2023/06/29/%E4%BA%BA%E7%B1%BB%E6%97%A9%E6%9C%9F%E9%A9%AF%E6%9C%8D%E9%87%8E%E7%94%9F-KDE-%E7%8F%8D%E8%B4%B5%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/06/29/%E4%BA%BA%E7%B1%BB%E6%97%A9%E6%9C%9F%E9%A9%AF%E6%9C%8D%E9%87%8E%E7%94%9F-KDE-%E7%8F%8D%E8%B4%B5%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>update 2021.8.17 第一个完整的版本</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>作为一个强迫症患者，在使用 Linux 之前，我早已受够了 Windows 系统的诸多限制，一直渴望着一个能够高度定制化的操作系统。而动念将主力操作系统转向 Linux 的起因，是学校的计算机系统基础课程需要使用类 Unix 系统进行实验。经过一波 STFW（Search The Friendly Web），我发现 Linux 正好满足了我的期望。</p><p>我在真机上使用的第一个 Linux 发行版是 Kubuntu，也就是使用 KDE 桌面的Ubuntu（传统 Ubuntu 使用的是 Gnome 桌面）。仍记得当时在虚拟机里打开 Kubuntu 的桌面时，那恰到好处的蓝色，舒服的点击动画，给我留下了极为深刻的体验，当即决定安装 Kubuntu 的双系统。后来，由于听多了学长的传教，决定转向 Manjaro，我也毫不犹豫地选择了 KDE 桌面。</p><p>作为一名优秀的强迫症患者（？），我投入了大量的时间进行 KDE 的美化，其间经历过多次暴毙和重装，终于得到了今天还算比较满意的桌面环境。以下是我的美化经历。</p><h2 id="2-设备"><a href="#2-设备" class="headerlink" title="2. 设备"></a>2. 设备</h2><p>我使用的笔记本是华为 Matebook 14 2020 锐龙版。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">CPU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Ryzen 5 4600H</span><br><span class="hljs-attribute">GPU</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Radeon Graphics Vega 7 (就是核显)</span><br><span class="hljs-attribute">内存</span><span class="hljs-punctuation">:</span> <span class="hljs-string">16GB DDR4 2667MHz</span><br><span class="hljs-attribute">硬盘</span><span class="hljs-punctuation">:</span> <span class="hljs-string">512GB SN730 SSD</span><br><br><span class="hljs-attribute">KDE Plasma 版本</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5.18.4</span><br><span class="hljs-attribute">KDE 框架版本</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5.64.0</span><br><span class="hljs-attribute">Qt 版本</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5.12.8</span><br><span class="hljs-attribute">内核版本</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5.11.0-25-generic</span><br><span class="hljs-attribute">图形平台</span><span class="hljs-punctuation">:</span> <span class="hljs-string">X11</span><br></code></pre></td></tr></table></figure><blockquote><p>这个电脑当初买的时候看中的是优秀的 2k 屏，没想到在安装 Linux 时，高分屏的适配反而成为一个大麻烦。</p></blockquote><h2 id="3-基础设置"><a href="#3-基础设置" class="headerlink" title="3. 基础设置"></a>3. 基础设置</h2><h3 id="3-1-屏幕缩放和夜晚颜色"><a href="#3-1-屏幕缩放和夜晚颜色" class="headerlink" title="3.1 屏幕缩放和夜晚颜色"></a>3.1 屏幕缩放和夜晚颜色</h3><p>首先进入设置 - 硬件 - 显卡与显示器，将全局缩放率调到一个比较舒服的水平（一般 2k 屏推荐 150% 或 175%，1080p 屏推荐 125% 或 150%）。</p><p>然后可以根据个人喜好开启夜间颜色。我个人是选择了总是开启，色温 5000K。</p><p>调整缩放比后需要重启计算机，因此需要首先进行这一步。（好像调整完缩放比例需要重启是 KDE 的特性？Gnome 和 Xfce 貌似都不需要）</p><p>调整完后重启计算机，可以点击左下角的 logo 调出开始菜单，当然也可以在终端中输入 sudo reboot（既然都用 Linux 了，当然要用命令行操作嘛（狗头））。</p><h3 id="3-2-程序坞"><a href="#3-2-程序坞" class="headerlink" title="3.2 程序坞"></a>3.2 程序坞</h3><p>程序坞（也叫 Dock）通常有两个主流选择：KDE 系的 Latte Dock 和 Gnome 系的 Plank。两者我都使用过，总体来讲 Latte Dock 功能更多，视觉特效更精致，与 KDE 集成更好（甚至可以直接在 Latte Dock 上添加 Plasma 小部件），而 Plank 更加简洁、稳定。</p><p>经过比较，我觉得 Dock 作为桌面环境最为基础的一个部件，可靠和高效最为重要，至于视觉特效，我反而不喜欢过于花哨的。因此最终我选择了 Plank。</p><p>下面是具体配置方法。首先安装 Plank，在命令行（在 KDE 中就是 Konsole）中输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">sudo pacman -S <span class="hljs-title function_">plank</span> <span class="hljs-params">(Arch系，包括Manjaro)</span><br>sudo apt install <span class="hljs-title function_">plank</span> <span class="hljs-params">(Debian系，包括Ubuntu)</span><br></code></pre></td></tr></table></figure><blockquote><p>其余操作系统请自行 STFW（Search The Friendly Web）如何通过包管理器安装软件。</p></blockquote><p>安装完后，可以点击左下角的 Logo 调出开始菜单，搜索 Plank 打开。不建议在命令行中输入 plank 打开，因为这样的话命令行一旦被关闭，plank 也没了。</p><p>这时 plank 和系统自身的面板重叠了，我们直接把系统面板给扬了（扬就是删除的意思）。右键点击面板 - 编辑面板 - 更多选项 - 删除面板。</p><blockquote><p>这时你会发现找不到开始菜单了。不要惊慌，我们待会会把它搞回来。</p></blockquote><p>如果要配置 plank，需要按住 Ctrl 键，然后右键点击 plank 的任意位置，点击首选项，然后可以根据自己的喜好调整。</p><p>如果要将软件添加到 plank 上，直接拖上去就行；或者打开该软件后在 plank 上右击它的图标，选择固定在 Dock 上。如果想把图标从 plank 上移除，可以右键，取消固定在 Dock 上，也可以直接拖出 Dock。</p><blockquote><p>Plank 自带的几个图标很具有迷惑性，那两个 VLC 有一个是真的一个是假的，长得像 Konsole 的图标其实不是 Konsole，所以建议全部扬了自己重新排列。</p><p>如果最新的 plank 没有以上现象，请忽略这段话。</p></blockquote><h3 id="3-3-顶部面板"><a href="#3-3-顶部面板" class="headerlink" title="3.3 顶部面板"></a>3.3 顶部面板</h3><p>在桌面上右键 - 添加面板 - 空面板，右键这个新面板，按住屏幕边缘按钮将它拖到屏幕的上面，调整大小。下面介绍编辑小部件的几个操作。</p><ul><li>在面板上添加部件的操作：右键面板，选择添加部件，在左侧的部件栏中将部件直接拖放到面板上。</li><li>下载新部件的操作：右键面板，选择添加部件，在左侧弹出的部件栏中点击获取新部件，然后搜索下载。</li><li>配置小部件的操作：右击小部件所在位置，点击配置×××。或者可以右击面板空白处，选择编辑面板，然后将鼠标选停在小部件上，点击配置。</li></ul><p>知道了以上操作之后应该可以根据自己的喜好定制顶部面板了。不过要注意的是，如果你将一部分部件靠左摆放，另一些靠右摆放，摆放完后一定要添加间距（右键面板 - 编辑面板 - 添加间距），否则重启后靠右的组件会滑到左边来。</p><p>我采用的排列方案是：</p><ul><li>左侧（从左至右）：应用程序启动器（自带），Applcation Title（下载），全局菜单（自带）</li><li>右侧（从右至左）：Window Button Applet（下载），Better inline clock（下载），系统托盘（自带）</li></ul><blockquote><p>Application Title 默认显示的是窗口名，过于冗长。可以右键它，选择配置 Application Title，将 Text Type 改成 Application title，为了更好的显示效果，也可以勾上 Bold（粗体）。</p><p>Window Button Applet 不能直接在内置的商店下载（详情说明里也写了），需要到 GitHub 上获取源代码自己编译。不过如果你使用 Debian 系或者 SUSE 系，可以直接从软件源下载编译好的版本（详见GitHub）。至于 Arch 系，万能的 AUR 里怎会少了它！可以用 yay -S applet-window-buttons-git 安装。</p><p>KDE 自带的数字时钟会将时间和日期显示在两行，个人觉得不太理想。可以搜索下载 Better inline clock 小部件，替代原来的数字时钟，然后按照自己的需求配置。</p></blockquote><h2 id="4-更多自定义设置"><a href="#4-更多自定义设置" class="headerlink" title="4. 更多自定义设置"></a>4. 更多自定义设置</h2><h3 id="4-1-全局主题"><a href="#4-1-全局主题" class="headerlink" title="4.1 全局主题"></a>4.1 全局主题</h3><p>点击设置 - 外观 - 全局主题，点击右下角获取新全局主题，选择几个喜欢的。此处我选择的是 Whitesur，Whitesur-alt 和 Whitesur-dark，是 macOS 风格的。下载好后应用。</p><p>如果网速较慢，不能正常下载，可以先从别的地方下载安装包。在搜索引擎中搜索 KDE Store，进入 KDE Store，在上方搜索框搜索 whitesur global 下载，按照 readme.md 的说明安装，然后在设置中激活。</p><p>此时你可能会看到可以停航母的粗边框，请点击窗口装饰元素，选择合适的比例。例如，你的系统缩放是 150% ，那就选择 Whitesur_x1.5 的窗口装饰元素。（最新的 KDE 版本窗口装饰和应用程序风格好像是并列的）</p><blockquote><p>如果你和我一样缩放比是是 175%，那就乖乖继续用 Breeze 的窗口装饰元素吧。（狗头）</p><p>如果应用 Breeze 窗口装饰元素时，实际变成了 Plastik：请将全局主题改为 Breeze，然后将除了窗口装饰元素之外的其他选项一一手动改为 Whitesur。（Kubuntu 20.04 LTS 可能会出这个 bug）</p></blockquote><h3 id="4-2-应用程序风格"><a href="#4-2-应用程序风格" class="headerlink" title="4.2 应用程序风格"></a>4.2 应用程序风格</h3><p>KDE 下的应用程序风格需要 kvantum manager 来管理。下载 kvantum：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">(Debian系)<br>sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:papirus/papirus<br>sudo apt update<br>sudo apt install qt5-style-kvantum qt5-style-kvantum-themes<br>(Arch系)<br>sudo pacman -S kvantum-qt5<br></code></pre></td></tr></table></figure><p>然后按照前文说明，进入 KDE Store，搜索 Whitesur kvantum，下载 kvantum 主题并解压。打开 kvantum manager，点击 select a Kvantum theme folder，选择解压好的文件夹，点击安装。然后点击 change or delete theme，选择刚刚安装的主题。</p><p>最后再在系统设置里将程序应用风格改为 kvantum。</p><p>在设置 - 应用程序风格中点击配置 GNOME &#x2F; GTK 应用程序样式，点击右下角下载新 GNOME &#x2F; GTK 应用程序样式，搜索 mac 并选择一个主题下载。我使用的是 Bigsur-Originals-Gtk-Blue-Light。</p><blockquote><p>似乎 GTK 应用的图标不会根据系统的缩放比例缩放。这个问题我也正在寻找解决方案，如有大佬知道怎么做请指教。</p></blockquote><h2 id="4-3-图标"><a href="#4-3-图标" class="headerlink" title="4.3 图标"></a>4.3 图标</h2><p>如果已经是主题配套的图标了，那这一步可以略过。如果不是，在设置里点击图标 - 获取新图标主题，搜索安装。如果有网络问题，也可以去 KDE Store 搜索安装。</p><h2 id="4-4-Plank-主题"><a href="#4-4-Plank-主题" class="headerlink" title="4.4 Plank 主题"></a>4.4 Plank 主题</h2><p>下载：进入 Gnome look 网站，在左侧选择 Plank theme，然后选择喜欢的主题下载。这里我使用的是 The Cupertino Effect - Next。<br>安装：将下载的压缩包解压，然后复制到 ~&#x2F;.local&#x2F;share&#x2F;plank&#x2F;themes 目录。然后按住 Ctrl 键右击 Plank 上任意图标，点击 Preferences，在 主题 里就能看到刚刚下载的主题了。</p><blockquote><p>Plank 主题有两个位置，一个是上述的 ~&#x2F;.local&#x2F;share&#x2F;plank&#x2F;themes，另一个是 &#x2F;usr&#x2F;share&#x2F;plank&#x2F;themes。第一个位置是用户个人的主题文件夹，其中的主题和配置只对当前用户生效。第二个是系统的主题文件夹，为所有用户共享。</p><p>大多数应用的配置文件都会存在于 ~&#x2F;.local&#x2F;share&#x2F; 和 &#x2F;usr&#x2F;share&#x2F; 这两个地方。我建议将个人设置保存在第一处，也就是用户个人的文件夹里。一方面是因为在 &#x2F;usr 中操作需要 root 权限，不方便也不安全，另一方面是因为以后若要重装系统，&#x2F; 分区是必须格式化的，而 &#x2F;home 分区可以不格式化，从而保留用户的个人设置，在新系统里就不用重新设置一遍了。<br>如果对下载的主题仍不太满意，可以手动修改配置文件。配置文件中应该都有详细的注释，可以修改数值从而得到想要的结果。 </p></blockquote><h2 id="5-结语"><a href="#5-结语" class="headerlink" title="5. 结语"></a>5. 结语</h2><p>曾有伟人说过（不是），用 Linux 就要做好折腾的准备。Linux 为我们提供高度可定制的功能的同时，也注定了它不会做到像商业化的操作系统那样稳定、可靠、开箱即用。在配置 Linux 系统，包括 KDE 时，难免出现一些令人恼火的小 bug。如何处理这些 bug，也是对于我们心态以及解决问题能力的一种锻炼。</p><p>之前，作为一名强迫症患者，我经常为了一些小瑕疵而 STFW 一整天。后来我发现这不是明智的行为。有一些问题是开发者的疏漏，经过更新可以轻易地解决；有一些则是由于自己对系统的理解尚不够深入，等到某一天，自己了解得多了之后，回头一看才发现原来是个如此简单的问题。</p><blockquote><p>你要爱这些你尚不能解决的问题，就像爱一本你暂时读不懂的书，或是一座上了锁的房屋。——里尔克</p></blockquote><p>当然也有一些问题是影响系统运作的重大问题。这个时候就需要有目的地上网查阅资料，询问同学和学长，通过有计划的努力来高效地解决这些问题，而不是在问题面前低头丧气，或者暴躁地 STFW，实际上却没有了解到任何有用的信息，这些都是我曾经犯过的错误。</p><p>不管怎么说，既然你已经读到了这篇文章，说明你我都已经是类 Unix 用户啦！</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>kde</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xorg 实现不重启调整缩放 &amp; 多显示器不同缩放</title>
    <link href="/2023/06/29/Xorg-%E5%AE%9E%E7%8E%B0%E4%B8%8D%E9%87%8D%E5%90%AF%E8%B0%83%E6%95%B4%E7%BC%A9%E6%94%BE-%E5%A4%9A%E6%98%BE%E7%A4%BA%E5%99%A8%E4%B8%8D%E5%90%8C%E7%BC%A9%E6%94%BE/"/>
    <url>/2023/06/29/Xorg-%E5%AE%9E%E7%8E%B0%E4%B8%8D%E9%87%8D%E5%90%AF%E8%B0%83%E6%95%B4%E7%BC%A9%E6%94%BE-%E5%A4%9A%E6%98%BE%E7%A4%BA%E5%99%A8%E4%B8%8D%E5%90%8C%E7%BC%A9%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>为了帮助搜索，这里加点 tag。</p><p>（ubuntu, kde, x-server, kubuntu, plasma, x-org）</p></blockquote><h2 id="这篇文章对你有帮助吗？"><a href="#这篇文章对你有帮助吗？" class="headerlink" title="这篇文章对你有帮助吗？"></a>这篇文章对你有帮助吗？</h2><p>首先，本文适用于使用 Xorg 图形服务的 Linux 系统，如果你不在使用 Xorg，那此文对你没有帮助。</p><ul><li>目前 Gnome 默认使用 Wayland 而非 Xorg，因此默认配置的 Ubuntu 20.04~22.04 不适用。</li><li>目前 KDE 默认采用 Xorg，因此默认配置的 Kubuntu 仍然适用（我就在用 Kubuntu 22.04）。</li><li>其余系统请自行百度如何查询图形服务为 Xorg 还是 Wayland。</li></ul><p>其次，此文操作原理是使用 xrandr 命令的 –scale 选项。如果你排斥使用 xrandr –scale，那此文对你没有帮助。</p><ul><li>非整数的缩放可能会带来十分轻微的画质下降和卡顿（不过影响很小，建议先试试）；</li><li>如果你已经熟练地阅读了 xrandr 的 manpage 并掌握其操作，那你大概率不需要阅读此文。</li></ul><p>最后，如果你只是需要调整全局缩放，并不需要实现不重启 &#x2F; 多显示器不同缩放，那建议使用更稳定的传统方法而非此文的方法。</p><ul><li>调整全局缩放的传统方法一是直接使用 kde 系统设置中的全局缩放设置，二是使用 xrandr –dpi 选项。前者众所周知需要重启，后者则必须要在 X 服务启动前就设定，因此一般需要写死在 ~&#x2F;.Xsession 中，也不能在系统启动后热调整缩放。</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人的需求是这样的，我有一台 14 英寸分辨率为 2160x1440 的笔记本，日常缩放为 175%，在宿舍里有一台 23.8 英寸分辨率为 2560x1440 的显示器，日常缩放为 150%，回宿舍就用显示器看。然而在使用 Xorg 的 Kubuntu 下，每次回宿舍或者出门都要调缩放、重启，实在是不够完美。经过 stfw，我摸索出了一个不重启调整缩放的 workaround，这个方法同时也能实现多屏幕不同缩放比。</p><p>我的想法是让全局缩放一直开在 175%，也就是比较高的一档，然后通过渲染出超分辨率的画面再缩小到显示器上，就可以实现降低全局缩放的效果。先贴一下效果图，我的显示器分辨率为 2560x1440，这里 Resolution 显示的是 2816x1584，说明已经完成了显示缩小。</p><p><img src="/attachments/image-20221015174744154.png" alt="image-20221015174744154"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>首先，直接运行 <code>xrandr</code> 命令，可以看到目前有哪几个显示器以及它们的名字。输出应该类似于</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Screen</span> <span class="hljs-number">0</span>: minimum <span class="hljs-number">320</span> x <span class="hljs-number">200</span>, current <span class="hljs-number">4080</span> x <span class="hljs-number">1440</span>, maximum <span class="hljs-number">8192</span> x <span class="hljs-number">8192</span><br><span class="hljs-attribute">eDP</span>-<span class="hljs-number">1</span> connected primary <span class="hljs-number">2160</span>x1440+<span class="hljs-number">0</span>+<span class="hljs-number">0</span> (normal left inverted right x axis y axis) <span class="hljs-number">275</span>mm x <span class="hljs-number">183</span>mm<br>   <span class="hljs-attribute">2160x1440</span>     <span class="hljs-number">60</span>.<span class="hljs-number">00</span>*+<br> <br><span class="hljs-attribute">DP</span>-<span class="hljs-number">1</span> connected <span class="hljs-number">1920</span>x1080+<span class="hljs-number">2160</span>+<span class="hljs-number">0</span> (normal left inverted right x axis y axis) <span class="hljs-number">521</span>mm x <span class="hljs-number">293</span>mm<br>   <span class="hljs-attribute">1920x1080</span>     <span class="hljs-number">60</span>.<span class="hljs-number">00</span>*+  <span class="hljs-number">50</span>.<span class="hljs-number">00</span>    <span class="hljs-number">59</span>.<span class="hljs-number">94</span>  <br></code></pre></td></tr></table></figure><p>接下来讲一下 xrandr 工具用得到的各个选项的含义和使用方法。以下中括号表示需要代入具体内容，实际敲的时候不需要写中括号。</p><ul><li>–fb [A]x[B]：指定画布大小为 A 像素长乘 B 像素宽。注意中间是小写字母 x，下同。</li><li>–output [A]：后续的选项对显示器 A 生效。<ul><li>显示器的名称可以通过上面说的方法，即直接执行 <code>xrandr</code> 看到</li></ul></li><li>–mode [A]x[B]：指定当前显示器输出分辨率为 A 乘 B。</li><li>–scale [A]x[B]：指定当前显示器在长上<strong>缩小</strong> A 倍，在宽上<strong>缩小</strong> B 倍，因此 A &gt; 1 表示缩小。</li><li>–pos [A]x[B]：指定当前显示器在画布上的位置。具体来说就是显示器应该显示的区域的左上角在画布上的坐标。<ul><li>坐标原点为左上角，单位为像素</li></ul></li><li>–panning [A]x[B]+[C]+[D]：设定当前显示器可点击区域为左上角坐标为 (C 像素, D 像素)，长为 A 像素，宽为 B 像素的矩形。所谓可点击区域，就是说在画布上的这一块区域是实际显示内容、可以点击的。</li></ul><p>上面这部分内容可以和 xrandr 的 manpage 结合起来看，毕竟我复述的肯定不如官方文档全。我们的原理是先使用 –fb 选项渲染出一个超分辨率的画布，然后使用 –scale 选项缩小它的大小，并且使用 –pos 选项指定屏幕显示画布那一块被缩小了的部分。</p><h3 id="单显示器"><a href="#单显示器" class="headerlink" title="单显示器"></a>单显示器</h3><p>结合上面所说的，不重启实现单显示器缩放命令形式应该类似于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xrandr --fb [C*E]x[D*F] --output [display] --mode [C]x[D] --panning [C*E]x[D*F]+0+0 --scale [E]x[F]<br></code></pre></td></tr></table></figure><p>举个例子，我们现在有一个物理分辨率为 2560 x 1440 的显示器，名字叫 HDMI-A-0，现在的全局缩放为 175%，需要改为 150%。</p><p>计算可得 $\sqrt{\frac{175}{150}}\approx 1.08$。由于渲染的分辨率需要为整数，选择缩小 1.1 倍。</p><blockquote><p>我一开始忘记开根号了，缩小了 1.2 倍，然后一直寻思字怎么这么小（捂脸哭.jpg</p></blockquote><p>以缩小 1.1 倍为例，需要渲染一个 (2560 * 1.1) x (1440 * 1.1) &#x3D; 2816 x 1584 的画布然后再缩小。可点击区域就是左上为 (0, 0)，2816 x 1584 大小的区域。因此命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xrandr --fb 2816x1584 --output HDMI-A-0 --mode 2560x1440 --scale 1.1x1.1 --pos 0x0 --panning 2816x1584+0+0<br></code></pre></td></tr></table></figure><h3 id="多显示器"><a href="#多显示器" class="headerlink" title="多显示器"></a>多显示器</h3><p>多显示器不同分辨率拼接的命令形式应该为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xrandr --fb [C*E+A]x[D*F] --output [display1] --auto --output [display2] --mode [C]x[D] --panning [C*E]x[D*F]+[A]+0 --scale [E]x[F] --right-of [display1]<br></code></pre></td></tr></table></figure><p>举个例子，这里参考了 <a href="%5Bhttps://nmgit.net/2020/139/">Barry 的笔记</a>。有一个物理分辨率为 2160x1440 的笔记本屏幕 eDP-1（这分辨率一眼 matebook），一个物理分辨率为 1920x1080 的显示器 DP-1 需要拼接在笔记本屏幕右侧，内容相较于笔记本屏幕需要缩小 1.5 倍。</p><p>由于是横向排布，整个画布的长应该为 1920*1.5 + 2160 &#x3D; 5040，宽为 max{1080*1.5, 1440} &#x3D; 1620。笔记本屏幕的位置应为 0x0，显示器的左上角位置为 2160*0。笔记本可点击区域直接使用默认设置，显示器的可点击区域为左上角为 2160*0，大小为 2880*1620 的矩形。因此，命令行为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xrandr --dpi 200 --fb 5040x1620 --output eDP-1 --mode 2160x1440 --pos 0x0 --output DP-1 --scale 1.5x1.5 --pos 2160x0 --panning 2880x1620+2160+0<br></code></pre></td></tr></table></figure><blockquote><p>这个 –dpi 选项是作者原来就写的，在我的电脑上不起作用，具体原因不明，我猜是因为 KDE 的默认缩放覆盖了这个设置。我个人是感觉不写也行，大家可以自己试试写不写 dpi 有没有区别。</p></blockquote><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>如果你在使用 KDE plasma 5 作为桌面，可能 plasma shell 不会根据最新的分辨率自动调整位置，这个时候需要重启 plasma shell 来适应新的分辨率。好在 plasma shell 是支持热重启的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kquitapp5 plasmashell &amp;&amp; kstart5 plasmashell<br></code></pre></td></tr></table></figure><p>此时，如果你在屏幕下方和右方有 plasma 面板，你可能会发现它们变得十分卡顿。这估计是 KDE 的任务栏坐标不是整数导致渲染出问题，目前好像没啥办法可以根本解决（<strong>如果有大佬会请一定要娇娇我</strong>）。一个妥协的方法是将这些面板移到屏幕上方或者左侧。</p><blockquote><p>花了一个小时和这个 bug 搏斗，最终还是妥协了</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>kde</tag>
      
      <tag>xorg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>helloworld</title>
    <link href="/2023/06/28/helloworld/"/>
    <url>/2023/06/28/helloworld/</url>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World!"></a>Hello, World!</h2><ul><li>这是一段话。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
